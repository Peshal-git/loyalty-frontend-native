/* tslint:disable */
/* eslint-disable */
/**
 * backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddTransactionRequest
 */
export interface AddTransactionRequest {
    /**
     * 
     * @type {number}
     * @memberof AddTransactionRequest
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof AddTransactionRequest
     */
    'spendingType': string;
}
/**
 * 
 * @export
 * @interface AdditionalInfoRegisterDTO
 */
export interface AdditionalInfoRegisterDTO {
    /**
     * 
     * @type {string}
     * @memberof AdditionalInfoRegisterDTO
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof AdditionalInfoRegisterDTO
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof AdditionalInfoRegisterDTO
     */
    'dob': string;
    /**
     * 
     * @type {boolean}
     * @memberof AdditionalInfoRegisterDTO
     */
    'privacyPolicy': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdditionalInfoRegisterDTO
     */
    'marketingConsent': boolean;
    /**
     * 
     * @type {string}
     * @memberof AdditionalInfoRegisterDTO
     */
    'referredBy'?: string;
}
/**
 * 
 * @export
 * @interface AdminsData
 */
export interface AdminsData {
    /**
     * 
     * @type {string}
     * @memberof AdminsData
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof AdminsData
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AdminsData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AdminsData
     */
    'adminId': string;
    /**
     * 
     * @type {string}
     * @memberof AdminsData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface AllRewardsListValueInner
 */
export interface AllRewardsListValueInner {
    /**
     * 
     * @type {boolean}
     * @memberof AllRewardsListValueInner
     */
    'active': boolean;
    /**
     * 
     * @type {number}
     * @memberof AllRewardsListValueInner
     */
    'pointsRequired': number;
    /**
     * 
     * @type {string}
     * @memberof AllRewardsListValueInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface AppResponse
 */
export interface AppResponse {
    /**
     * 
     * @type {number}
     * @memberof AppResponse
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponse
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponse
     */
    'success': boolean;
    /**
     * 
     * @type {any}
     * @memberof AppResponse
     */
    'data'?: any;
    /**
     * 
     * @type {string}
     * @memberof AppResponse
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseActiveRewardsList
 */
export interface AppResponseActiveRewardsList {
    /**
     * 
     * @type {number}
     * @memberof AppResponseActiveRewardsList
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseActiveRewardsList
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseActiveRewardsList
     */
    'success': boolean;
    /**
     * 
     * @type {{ [key: string]: Array<RedeemableRewardsListValueInner>; }}
     * @memberof AppResponseActiveRewardsList
     */
    'data'?: { [key: string]: Array<RedeemableRewardsListValueInner>; };
    /**
     * 
     * @type {string}
     * @memberof AppResponseActiveRewardsList
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseAdminsDataArray
 */
export interface AppResponseAdminsDataArray {
    /**
     * 
     * @type {number}
     * @memberof AppResponseAdminsDataArray
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseAdminsDataArray
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseAdminsDataArray
     */
    'success': boolean;
    /**
     * 
     * @type {Array<AdminsData>}
     * @memberof AppResponseAdminsDataArray
     */
    'data'?: Array<AdminsData>;
    /**
     * 
     * @type {string}
     * @memberof AppResponseAdminsDataArray
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseAllRewardsList
 */
export interface AppResponseAllRewardsList {
    /**
     * 
     * @type {number}
     * @memberof AppResponseAllRewardsList
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseAllRewardsList
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseAllRewardsList
     */
    'success': boolean;
    /**
     * 
     * @type {{ [key: string]: Array<AllRewardsListValueInner>; }}
     * @memberof AppResponseAllRewardsList
     */
    'data'?: { [key: string]: Array<AllRewardsListValueInner>; };
    /**
     * 
     * @type {string}
     * @memberof AppResponseAllRewardsList
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseEmailString
 */
export interface AppResponseEmailString {
    /**
     * 
     * @type {number}
     * @memberof AppResponseEmailString
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseEmailString
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseEmailString
     */
    'success': boolean;
    /**
     * 
     * @type {AppResponseEmailStringData}
     * @memberof AppResponseEmailString
     */
    'data'?: AppResponseEmailStringData;
    /**
     * 
     * @type {string}
     * @memberof AppResponseEmailString
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseEmailStringData
 */
export interface AppResponseEmailStringData {
    /**
     * 
     * @type {string}
     * @memberof AppResponseEmailStringData
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface AppResponseMemberInfo
 */
export interface AppResponseMemberInfo {
    /**
     * 
     * @type {number}
     * @memberof AppResponseMemberInfo
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseMemberInfo
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseMemberInfo
     */
    'success': boolean;
    /**
     * 
     * @type {MemberInfo}
     * @memberof AppResponseMemberInfo
     */
    'data'?: MemberInfo;
    /**
     * 
     * @type {string}
     * @memberof AppResponseMemberInfo
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseMemberSelfInfo
 */
export interface AppResponseMemberSelfInfo {
    /**
     * 
     * @type {number}
     * @memberof AppResponseMemberSelfInfo
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseMemberSelfInfo
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseMemberSelfInfo
     */
    'success': boolean;
    /**
     * 
     * @type {MemberSelfInfo}
     * @memberof AppResponseMemberSelfInfo
     */
    'data'?: MemberSelfInfo;
    /**
     * 
     * @type {string}
     * @memberof AppResponseMemberSelfInfo
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseMembersDataArray
 */
export interface AppResponseMembersDataArray {
    /**
     * 
     * @type {number}
     * @memberof AppResponseMembersDataArray
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseMembersDataArray
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseMembersDataArray
     */
    'success': boolean;
    /**
     * 
     * @type {Array<MembersData>}
     * @memberof AppResponseMembersDataArray
     */
    'data'?: Array<MembersData>;
    /**
     * 
     * @type {string}
     * @memberof AppResponseMembersDataArray
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseOrgInfo
 */
export interface AppResponseOrgInfo {
    /**
     * 
     * @type {number}
     * @memberof AppResponseOrgInfo
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseOrgInfo
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseOrgInfo
     */
    'success': boolean;
    /**
     * 
     * @type {OrgInfo}
     * @memberof AppResponseOrgInfo
     */
    'data'?: OrgInfo;
    /**
     * 
     * @type {string}
     * @memberof AppResponseOrgInfo
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseRedeemableRewardsList
 */
export interface AppResponseRedeemableRewardsList {
    /**
     * 
     * @type {number}
     * @memberof AppResponseRedeemableRewardsList
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseRedeemableRewardsList
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseRedeemableRewardsList
     */
    'success': boolean;
    /**
     * 
     * @type {{ [key: string]: Array<RedeemableRewardsListValueInner>; }}
     * @memberof AppResponseRedeemableRewardsList
     */
    'data'?: { [key: string]: Array<RedeemableRewardsListValueInner>; };
    /**
     * 
     * @type {string}
     * @memberof AppResponseRedeemableRewardsList
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseRedemptionDataArray
 */
export interface AppResponseRedemptionDataArray {
    /**
     * 
     * @type {number}
     * @memberof AppResponseRedemptionDataArray
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseRedemptionDataArray
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseRedemptionDataArray
     */
    'success': boolean;
    /**
     * 
     * @type {Array<RedemptionData>}
     * @memberof AppResponseRedemptionDataArray
     */
    'data'?: Array<RedemptionData>;
    /**
     * 
     * @type {string}
     * @memberof AppResponseRedemptionDataArray
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseSpendingTypesArray
 */
export interface AppResponseSpendingTypesArray {
    /**
     * 
     * @type {number}
     * @memberof AppResponseSpendingTypesArray
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseSpendingTypesArray
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseSpendingTypesArray
     */
    'success': boolean;
    /**
     * 
     * @type {Array<SpendingTypes>}
     * @memberof AppResponseSpendingTypesArray
     */
    'data'?: Array<SpendingTypes>;
    /**
     * 
     * @type {string}
     * @memberof AppResponseSpendingTypesArray
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseString
 */
export interface AppResponseString {
    /**
     * 
     * @type {number}
     * @memberof AppResponseString
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseString
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseString
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof AppResponseString
     */
    'data'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppResponseString
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseTierInfoArray
 */
export interface AppResponseTierInfoArray {
    /**
     * 
     * @type {number}
     * @memberof AppResponseTierInfoArray
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseTierInfoArray
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseTierInfoArray
     */
    'success': boolean;
    /**
     * 
     * @type {Array<TierInfo>}
     * @memberof AppResponseTierInfoArray
     */
    'data'?: Array<TierInfo>;
    /**
     * 
     * @type {string}
     * @memberof AppResponseTierInfoArray
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseTransactionDataArray
 */
export interface AppResponseTransactionDataArray {
    /**
     * 
     * @type {number}
     * @memberof AppResponseTransactionDataArray
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseTransactionDataArray
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseTransactionDataArray
     */
    'success': boolean;
    /**
     * 
     * @type {Array<TransactionData>}
     * @memberof AppResponseTransactionDataArray
     */
    'data'?: Array<TransactionData>;
    /**
     * 
     * @type {string}
     * @memberof AppResponseTransactionDataArray
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseUnknown
 */
export interface AppResponseUnknown {
    /**
     * 
     * @type {number}
     * @memberof AppResponseUnknown
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseUnknown
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseUnknown
     */
    'success': boolean;
    /**
     * 
     * @type {any}
     * @memberof AppResponseUnknown
     */
    'data'?: any;
    /**
     * 
     * @type {string}
     * @memberof AppResponseUnknown
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseUserLoginResponseData
 */
export interface AppResponseUserLoginResponseData {
    /**
     * 
     * @type {number}
     * @memberof AppResponseUserLoginResponseData
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseUserLoginResponseData
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseUserLoginResponseData
     */
    'success': boolean;
    /**
     * 
     * @type {UserLoginResponseData}
     * @memberof AppResponseUserLoginResponseData
     */
    'data'?: UserLoginResponseData;
    /**
     * 
     * @type {string}
     * @memberof AppResponseUserLoginResponseData
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface AppResponseUserResponseData
 */
export interface AppResponseUserResponseData {
    /**
     * 
     * @type {number}
     * @memberof AppResponseUserResponseData
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof AppResponseUserResponseData
     */
    'message': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppResponseUserResponseData
     */
    'success': boolean;
    /**
     * 
     * @type {ReqUser}
     * @memberof AppResponseUserResponseData
     */
    'data'?: ReqUser;
    /**
     * 
     * @type {string}
     * @memberof AppResponseUserResponseData
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface CreateUserDTO
 */
export interface CreateUserDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDTO
     */
    'dob': string;
}
/**
 * 
 * @export
 * @interface DosinkLoyaltyPartner
 */
export interface DosinkLoyaltyPartner {
    /**
     * 
     * @type {string}
     * @memberof DosinkLoyaltyPartner
     */
    'sfId': string;
    /**
     * 
     * @type {string}
     * @memberof DosinkLoyaltyPartner
     */
    'appId': string;
    /**
     * 
     * @type {string}
     * @memberof DosinkLoyaltyPartner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof DosinkLoyaltyPartner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof DosinkLoyaltyPartner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DosinkLoyaltyPartner
     */
    'cardKey': string;
    /**
     * 
     * @type {string}
     * @memberof DosinkLoyaltyPartner
     */
    'partnerLogoImage': string;
    /**
     * 
     * @type {string}
     * @memberof DosinkLoyaltyPartner
     */
    'tagline': string;
    /**
     * 
     * @type {string}
     * @memberof DosinkLoyaltyPartner
     */
    'googleWalletClassSuffix': string;
    /**
     * 
     * @type {boolean}
     * @memberof DosinkLoyaltyPartner
     */
    'active': boolean;
    /**
     * 
     * @type {string}
     * @memberof DosinkLoyaltyPartner
     */
    'systemmodstamp': string;
    /**
     * 
     * @type {boolean}
     * @memberof DosinkLoyaltyPartner
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {string}
     * @memberof DosinkLoyaltyPartner
     */
    'hcLastop': string;
    /**
     * 
     * @type {string}
     * @memberof DosinkLoyaltyPartner
     */
    'hcErr': string;
}
/**
 * 
 * @export
 * @interface FlywireTest200Response
 */
export interface FlywireTest200Response {
    /**
     * 
     * @type {any}
     * @memberof FlywireTest200Response
     */
    'data': any;
}
/**
 * 
 * @export
 * @interface ForgotPasswordDTO
 */
export interface ForgotPasswordDTO {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordDTO
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface LineLoginRequest
 */
export interface LineLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LineLoginRequest
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface LoyaltyUser
 */
export interface LoyaltyUser {
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'appId': string;
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'sfId': string;
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'dosinkLoyaltyParnerExternalId': string;
    /**
     * 
     * @type {DosinkLoyaltyPartner}
     * @memberof LoyaltyUser
     */
    'dosinkLoyaltyPartner': DosinkLoyaltyPartner;
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'Systemmodstamp': string;
    /**
     * 
     * @type {boolean}
     * @memberof LoyaltyUser
     */
    'isDeleted': boolean;
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'hcLastop': string;
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'hcErr': string;
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'dob'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LoyaltyUser
     */
    'verified': boolean;
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'verifyToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LoyaltyUser
     */
    'verifyEmailRequest'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LoyaltyUser
     */
    'forgotPasswordToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LoyaltyUser
     */
    'forgotPasswordRequest'?: boolean;
}
/**
 * 
 * @export
 * @interface MemberInfo
 */
export interface MemberInfo {
    /**
     * 
     * @type {string}
     * @memberof MemberInfo
     */
    'referredBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberInfo
     */
    'currentTier': string;
    /**
     * 
     * @type {number}
     * @memberof MemberInfo
     */
    'totalExpenditure': number;
    /**
     * 
     * @type {number}
     * @memberof MemberInfo
     */
    'pointsBalance': number;
    /**
     * 
     * @type {number}
     * @memberof MemberInfo
     */
    'lifetimePoints': number;
    /**
     * 
     * @type {boolean}
     * @memberof MemberInfo
     */
    'needsExtraInfo': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MemberInfo
     */
    'verified': boolean;
    /**
     * 
     * @type {MemberStatus}
     * @memberof MemberInfo
     */
    'status': MemberStatus;
    /**
     * 
     * @type {string}
     * @memberof MemberInfo
     */
    'createdDate': string;
    /**
     * 
     * @type {string}
     * @memberof MemberInfo
     */
    'dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberInfo
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof MemberInfo
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof MemberInfo
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof MemberInfo
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof MemberInfo
     */
    'memberId': string;
    /**
     * 
     * @type {string}
     * @memberof MemberInfo
     */
    'id': string;
}


/**
 * 
 * @export
 * @interface MemberSelfInfo
 */
export interface MemberSelfInfo {
    /**
     * 
     * @type {number}
     * @memberof MemberSelfInfo
     */
    'basePointsDifference': number | null;
    /**
     * 
     * @type {number}
     * @memberof MemberSelfInfo
     */
    'pointsToNextTier': number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof MemberSelfInfo
     */
    'allTiers': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MemberSelfInfo
     */
    'nextTier': string;
    /**
     * 
     * @type {string}
     * @memberof MemberSelfInfo
     */
    'tierSvgContent': string;
    /**
     * 
     * @type {string}
     * @memberof MemberSelfInfo
     */
    'currentTier': string;
    /**
     * 
     * @type {number}
     * @memberof MemberSelfInfo
     */
    'totalExpenditure': number;
    /**
     * 
     * @type {number}
     * @memberof MemberSelfInfo
     */
    'pointsBalance': number;
    /**
     * 
     * @type {number}
     * @memberof MemberSelfInfo
     */
    'lifetimePoints': number;
    /**
     * 
     * @type {boolean}
     * @memberof MemberSelfInfo
     */
    'needsExtraInfo': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MemberSelfInfo
     */
    'verified': boolean;
    /**
     * 
     * @type {MemberStatus}
     * @memberof MemberSelfInfo
     */
    'status': MemberStatus;
    /**
     * 
     * @type {string}
     * @memberof MemberSelfInfo
     */
    'createdDate': string;
    /**
     * 
     * @type {string}
     * @memberof MemberSelfInfo
     */
    'dob'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberSelfInfo
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof MemberSelfInfo
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof MemberSelfInfo
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MemberSelfInfo
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof MemberSelfInfo
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof MemberSelfInfo
     */
    'memberId': string;
    /**
     * 
     * @type {string}
     * @memberof MemberSelfInfo
     */
    'id': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const MemberStatus = {
    Pending: 'PENDING',
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;

export type MemberStatus = typeof MemberStatus[keyof typeof MemberStatus];


/**
 * 
 * @export
 * @interface MembersData
 */
export interface MembersData {
    /**
     * 
     * @type {string}
     * @memberof MembersData
     */
    'createdDate': string;
    /**
     * 
     * @type {string}
     * @memberof MembersData
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof MembersData
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof MembersData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MembersData
     */
    'memberId': string;
    /**
     * 
     * @type {string}
     * @memberof MembersData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface OrgInfo
 */
export interface OrgInfo {
    /**
     * 
     * @type {string}
     * @memberof OrgInfo
     */
    'logo': string;
    /**
     * 
     * @type {string}
     * @memberof OrgInfo
     */
    'tagline': string;
    /**
     * 
     * @type {string}
     * @memberof OrgInfo
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface RedeemRewardRequest
 */
export interface RedeemRewardRequest {
    /**
     * 
     * @type {string}
     * @memberof RedeemRewardRequest
     */
    'rewardCategory': string;
    /**
     * 
     * @type {string}
     * @memberof RedeemRewardRequest
     */
    'reward': string;
}
/**
 * 
 * @export
 * @interface RedeemableRewardsListValueInner
 */
export interface RedeemableRewardsListValueInner {
    /**
     * 
     * @type {number}
     * @memberof RedeemableRewardsListValueInner
     */
    'pointsRequired': number;
    /**
     * 
     * @type {string}
     * @memberof RedeemableRewardsListValueInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface RedemptionData
 */
export interface RedemptionData {
    /**
     * 
     * @type {number}
     * @memberof RedemptionData
     */
    'pointsUsed': number;
    /**
     * 
     * @type {string}
     * @memberof RedemptionData
     */
    'reward': string;
    /**
     * 
     * @type {string}
     * @memberof RedemptionData
     */
    'categoryType': string;
    /**
     * 
     * @type {string}
     * @memberof RedemptionData
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof RedemptionData
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof RedemptionData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ReqUser
 */
export interface ReqUser {
    /**
     * 
     * @type {boolean}
     * @memberof ReqUser
     */
    'needsExtraInfo': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReqUser
     */
    'permissions': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReqUser
     */
    'roles': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ReqUser
     */
    'verified': boolean;
    /**
     * 
     * @type {string}
     * @memberof ReqUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ReqUser
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ReqUser
     */
    'sfId': string;
    /**
     * 
     * @type {string}
     * @memberof ReqUser
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface SpendingTypes
 */
export interface SpendingTypes {
    /**
     * 
     * @type {number}
     * @memberof SpendingTypes
     */
    'multiplier': number;
    /**
     * 
     * @type {string}
     * @memberof SpendingTypes
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface TierInfo
 */
export interface TierInfo {
    /**
     * 
     * @type {string}
     * @memberof TierInfo
     */
    'svgContent': string;
    /**
     * 
     * @type {number}
     * @memberof TierInfo
     */
    'discount': number;
    /**
     * 
     * @type {number}
     * @memberof TierInfo
     */
    'basePoints': number;
    /**
     * 
     * @type {string}
     * @memberof TierInfo
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TierInfo
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface TransactionData
 */
export interface TransactionData {
    /**
     * 
     * @type {number}
     * @memberof TransactionData
     */
    'pointsGained': number;
    /**
     * 
     * @type {number}
     * @memberof TransactionData
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof TransactionData
     */
    'spendingType': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionData
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionData
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface UserLoginDTO
 */
export interface UserLoginDTO {
    /**
     * 
     * @type {string}
     * @memberof UserLoginDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginDTO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserLoginResponseData
 */
export interface UserLoginResponseData {
    /**
     * 
     * @type {string}
     * @memberof UserLoginResponseData
     */
    'token': string;
    /**
     * 
     * @type {ReqUser}
     * @memberof UserLoginResponseData
     */
    'user': ReqUser;
}
/**
 * 
 * @export
 * @interface UserRegisterDTO
 */
export interface UserRegisterDTO {
    /**
     * 
     * @type {string}
     * @memberof UserRegisterDTO
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterDTO
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterDTO
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterDTO
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterDTO
     */
    'dob': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserRegisterDTO
     */
    'privacyPolicy': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserRegisterDTO
     */
    'marketingConsent': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterDTO
     */
    'referredBy'?: string;
}
/**
 * 
 * @export
 * @interface UserUpdateDTO
 */
export interface UserUpdateDTO {
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDTO
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDTO
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDTO
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDTO
     */
    'dob'?: string;
}
/**
 * 
 * @export
 * @interface VerifyTokenDTO
 */
export interface VerifyTokenDTO {
    /**
     * 
     * @type {string}
     * @memberof VerifyTokenDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof VerifyTokenDTO
     */
    'otpCode': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} memberId 
         * @param {AddTransactionRequest} addTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTransaction: async (memberId: string, addTransactionRequest: AddTransactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('addTransaction', 'memberId', memberId)
            // verify required parameter 'addTransactionRequest' is not null or undefined
            assertParamExists('addTransaction', 'addTransactionRequest', addTransactionRequest)
            const localVarPath = `/admin/addTransactionById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (memberId !== undefined) {
                localVarQueryParameter['memberId'] = memberId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdmin: async (createUserDTO: CreateUserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDTO' is not null or undefined
            assertParamExists('createAdmin', 'createUserDTO', createUserDTO)
            const localVarPath = `/auth/createAdmin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGoogleWalletPass: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member/createGoogleWalletPass`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMember: async (createUserDTO: CreateUserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDTO' is not null or undefined
            assertParamExists('createMember', 'createUserDTO', createUserDTO)
            const localVarPath = `/auth/createMember`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadOwnPointsWallet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member/downloadPointsWallet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadPointsWallet: async (memberId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('downloadPointsWallet', 'memberId', memberId)
            const localVarPath = `/admin/downloadPointsWallet/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRedemptions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member/downloadRedemptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadTransactions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member/downloadTransactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flywireEndpointsTest: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/flywire-endpoints-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flywireTest: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/flywire-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordDTO} forgotPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: async (forgotPasswordDTO: ForgotPasswordDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordDTO' is not null or undefined
            assertParamExists('forgotPassword', 'forgotPasswordDTO', forgotPasswordDTO)
            const localVarPath = `/auth/forgotPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveRewards: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getActiveRewards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmins: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/getAdmins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRewards: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/getAllRewards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberInfo: async (memberId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getMemberInfo', 'memberId', memberId)
            const localVarPath = `/admin/getMemberInfo/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberRedemptions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member/getRedemptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberTransactions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member/getTransactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/getMembers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrg: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getOrg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedeemableRewards: async (memberId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getRedeemableRewards', 'memberId', memberId)
            const localVarPath = `/admin/getRedeemableRewards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (memberId !== undefined) {
                localVarQueryParameter['memberId'] = memberId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedemption: async (memberId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getRedemption', 'memberId', memberId)
            const localVarPath = `/admin/getRedemptionsById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (memberId !== undefined) {
                localVarQueryParameter['memberId'] = memberId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewards: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/member/getRewards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpendingTypes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/getSpendingTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTierInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getTierInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction: async (memberId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getTransaction', 'memberId', memberId)
            const localVarPath = `/admin/getTransactionsById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (memberId !== undefined) {
                localVarQueryParameter['memberId'] = memberId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/getUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleLogin: async (code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('googleLogin', 'code', code)
            const localVarPath = `/auth/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LineLoginRequest} lineLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lineLogin: async (lineLoginRequest: LineLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lineLoginRequest' is not null or undefined
            assertParamExists('lineLogin', 'lineLoginRequest', lineLoginRequest)
            const localVarPath = `/auth/line`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lineLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserLoginDTO} userLoginDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (userLoginDTO: UserLoginDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLoginDTO' is not null or undefined
            assertParamExists('login', 'userLoginDTO', userLoginDTO)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {RedeemRewardRequest} redeemRewardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemReward: async (memberId: string, redeemRewardRequest: RedeemRewardRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('redeemReward', 'memberId', memberId)
            // verify required parameter 'redeemRewardRequest' is not null or undefined
            assertParamExists('redeemReward', 'redeemRewardRequest', redeemRewardRequest)
            const localVarPath = `/admin/redeemRewardById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (memberId !== undefined) {
                localVarQueryParameter['memberId'] = memberId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(redeemRewardRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AdditionalInfoRegisterDTO} additionalInfoRegisterDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAdditionalInfo: async (additionalInfoRegisterDTO: AdditionalInfoRegisterDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'additionalInfoRegisterDTO' is not null or undefined
            assertParamExists('registerAdditionalInfo', 'additionalInfoRegisterDTO', additionalInfoRegisterDTO)
            const localVarPath = `/auth/additional-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(additionalInfoRegisterDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserRegisterDTO} userRegisterDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup: async (userRegisterDTO: UserRegisterDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegisterDTO' is not null or undefined
            assertParamExists('signup', 'userRegisterDTO', userRegisterDTO)
            const localVarPath = `/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegisterDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {UserUpdateDTO} userUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMember: async (memberId: string, userUpdateDTO: UserUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('updateMember', 'memberId', memberId)
            // verify required parameter 'userUpdateDTO' is not null or undefined
            assertParamExists('updateMember', 'userUpdateDTO', userUpdateDTO)
            const localVarPath = `/admin/updateMember/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyTokenDTO} verifyTokenDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyToken: async (verifyTokenDTO: VerifyTokenDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyTokenDTO' is not null or undefined
            assertParamExists('verifyToken', 'verifyTokenDTO', verifyTokenDTO)
            const localVarPath = `/auth/verifyToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyTokenDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} memberId 
         * @param {AddTransactionRequest} addTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTransaction(memberId: string, addTransactionRequest: AddTransactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTransaction(memberId, addTransactionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAdmin(createUserDTO: CreateUserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseEmailString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAdmin(createUserDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGoogleWalletPass(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGoogleWalletPass(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createGoogleWalletPass']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMember(createUserDTO: CreateUserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseEmailString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMember(createUserDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadOwnPointsWallet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadOwnPointsWallet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.downloadOwnPointsWallet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadPointsWallet(memberId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadPointsWallet(memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.downloadPointsWallet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadRedemptions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadRedemptions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.downloadRedemptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadTransactions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadTransactions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.downloadTransactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flywireEndpointsTest(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flywireEndpointsTest(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.flywireEndpointsTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flywireTest(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlywireTest200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flywireTest(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.flywireTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ForgotPasswordDTO} forgotPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(forgotPasswordDTO: ForgotPasswordDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(forgotPasswordDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.forgotPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveRewards(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseActiveRewardsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveRewards(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getActiveRewards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdmins(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseAdminsDataArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmins(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAdmins']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRewards(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseAllRewardsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRewards(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllRewards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberInfo(memberId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseMemberInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberInfo(memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMemberInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberRedemptions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseRedemptionDataArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberRedemptions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMemberRedemptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberTransactions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseTransactionDataArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberTransactions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMemberTransactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseMembersDataArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrg(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseOrgInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrg(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getOrg']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseMemberSelfInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRedeemableRewards(memberId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseRedeemableRewardsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRedeemableRewards(memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRedeemableRewards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRedemption(memberId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseRedemptionDataArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRedemption(memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRedemption']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRewards(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseRedeemableRewardsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRewards(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRewards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpendingTypes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseSpendingTypesArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpendingTypes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSpendingTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTierInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseTierInfoArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTierInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTierInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransaction(memberId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseTransactionDataArray>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransaction(memberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseUserResponseData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googleLogin(code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseUserLoginResponseData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googleLogin(code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.googleLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LineLoginRequest} lineLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lineLogin(lineLoginRequest: LineLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseUserLoginResponseData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lineLogin(lineLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.lineLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserLoginDTO} userLoginDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(userLoginDTO: UserLoginDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseUserLoginResponseData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(userLoginDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {RedeemRewardRequest} redeemRewardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redeemReward(memberId: string, redeemRewardRequest: RedeemRewardRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseUnknown>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemReward(memberId, redeemRewardRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.redeemReward']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refresh(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseUserLoginResponseData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.refresh']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AdditionalInfoRegisterDTO} additionalInfoRegisterDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerAdditionalInfo(additionalInfoRegisterDTO: AdditionalInfoRegisterDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerAdditionalInfo(additionalInfoRegisterDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.registerAdditionalInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserRegisterDTO} userRegisterDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signup(userRegisterDTO: UserRegisterDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseUserLoginResponseData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signup(userRegisterDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.signup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {UserUpdateDTO} userUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMember(memberId: string, userUpdateDTO: UserUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoyaltyUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMember(memberId, userUpdateDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {VerifyTokenDTO} verifyTokenDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyToken(verifyTokenDTO: VerifyTokenDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponseUserLoginResponseData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyToken(verifyTokenDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.verifyToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {string} memberId 
         * @param {AddTransactionRequest} addTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTransaction(memberId: string, addTransactionRequest: AddTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppResponse> {
            return localVarFp.addTransaction(memberId, addTransactionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdmin(createUserDTO: CreateUserDTO, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseEmailString> {
            return localVarFp.createAdmin(createUserDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGoogleWalletPass(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseString> {
            return localVarFp.createGoogleWalletPass(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserDTO} createUserDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMember(createUserDTO: CreateUserDTO, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseEmailString> {
            return localVarFp.createMember(createUserDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadOwnPointsWallet(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.downloadOwnPointsWallet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadPointsWallet(memberId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.downloadPointsWallet(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRedemptions(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.downloadRedemptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadTransactions(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.downloadTransactions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flywireEndpointsTest(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.flywireEndpointsTest(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flywireTest(options?: RawAxiosRequestConfig): AxiosPromise<FlywireTest200Response> {
            return localVarFp.flywireTest(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForgotPasswordDTO} forgotPasswordDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(forgotPasswordDTO: ForgotPasswordDTO, options?: RawAxiosRequestConfig): AxiosPromise<AppResponse> {
            return localVarFp.forgotPassword(forgotPasswordDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveRewards(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseActiveRewardsList> {
            return localVarFp.getActiveRewards(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmins(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseAdminsDataArray> {
            return localVarFp.getAdmins(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRewards(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseAllRewardsList> {
            return localVarFp.getAllRewards(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberInfo(memberId: string, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseMemberInfo> {
            return localVarFp.getMemberInfo(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberRedemptions(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseRedemptionDataArray> {
            return localVarFp.getMemberRedemptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberTransactions(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseTransactionDataArray> {
            return localVarFp.getMemberTransactions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembers(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseMembersDataArray> {
            return localVarFp.getMembers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrg(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseOrgInfo> {
            return localVarFp.getOrg(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseMemberSelfInfo> {
            return localVarFp.getProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedeemableRewards(memberId: string, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseRedeemableRewardsList> {
            return localVarFp.getRedeemableRewards(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedemption(memberId: string, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseRedemptionDataArray> {
            return localVarFp.getRedemption(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewards(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseRedeemableRewardsList> {
            return localVarFp.getRewards(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpendingTypes(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseSpendingTypesArray> {
            return localVarFp.getSpendingTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTierInfo(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseTierInfoArray> {
            return localVarFp.getTierInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction(memberId: string, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseTransactionDataArray> {
            return localVarFp.getTransaction(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseUserResponseData> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleLogin(code: string, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseUserLoginResponseData> {
            return localVarFp.googleLogin(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LineLoginRequest} lineLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lineLogin(lineLoginRequest: LineLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseUserLoginResponseData> {
            return localVarFp.lineLogin(lineLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserLoginDTO} userLoginDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(userLoginDTO: UserLoginDTO, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseUserLoginResponseData> {
            return localVarFp.login(userLoginDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: RawAxiosRequestConfig): AxiosPromise<AppResponse> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {RedeemRewardRequest} redeemRewardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemReward(memberId: string, redeemRewardRequest: RedeemRewardRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseUnknown> {
            return localVarFp.redeemReward(memberId, redeemRewardRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh(options?: RawAxiosRequestConfig): AxiosPromise<AppResponseUserLoginResponseData> {
            return localVarFp.refresh(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdditionalInfoRegisterDTO} additionalInfoRegisterDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAdditionalInfo(additionalInfoRegisterDTO: AdditionalInfoRegisterDTO, options?: RawAxiosRequestConfig): AxiosPromise<AppResponse> {
            return localVarFp.registerAdditionalInfo(additionalInfoRegisterDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserRegisterDTO} userRegisterDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(userRegisterDTO: UserRegisterDTO, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseUserLoginResponseData> {
            return localVarFp.signup(userRegisterDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {UserUpdateDTO} userUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMember(memberId: string, userUpdateDTO: UserUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<LoyaltyUser> {
            return localVarFp.updateMember(memberId, userUpdateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerifyTokenDTO} verifyTokenDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyToken(verifyTokenDTO: VerifyTokenDTO, options?: RawAxiosRequestConfig): AxiosPromise<AppResponseUserLoginResponseData> {
            return localVarFp.verifyToken(verifyTokenDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {string} memberId 
     * @param {AddTransactionRequest} addTransactionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addTransaction(memberId: string, addTransactionRequest: AddTransactionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addTransaction(memberId, addTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserDTO} createUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAdmin(createUserDTO: CreateUserDTO, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createAdmin(createUserDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createGoogleWalletPass(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createGoogleWalletPass(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserDTO} createUserDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createMember(createUserDTO: CreateUserDTO, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createMember(createUserDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public downloadOwnPointsWallet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).downloadOwnPointsWallet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public downloadPointsWallet(memberId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).downloadPointsWallet(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public downloadRedemptions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).downloadRedemptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public downloadTransactions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).downloadTransactions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public flywireEndpointsTest(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).flywireEndpointsTest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public flywireTest(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).flywireTest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ForgotPasswordDTO} forgotPasswordDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public forgotPassword(forgotPasswordDTO: ForgotPasswordDTO, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).forgotPassword(forgotPasswordDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getActiveRewards(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getActiveRewards(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdmins(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAdmins(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllRewards(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllRewards(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMemberInfo(memberId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMemberInfo(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMemberRedemptions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMemberRedemptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMemberTransactions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMemberTransactions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMembers(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMembers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOrg(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getOrg(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProfile(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRedeemableRewards(memberId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRedeemableRewards(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRedemption(memberId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRedemption(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRewards(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRewards(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSpendingTypes(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSpendingTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTierInfo(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTierInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTransaction(memberId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTransaction(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public googleLogin(code: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).googleLogin(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LineLoginRequest} lineLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public lineLogin(lineLoginRequest: LineLoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).lineLogin(lineLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserLoginDTO} userLoginDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(userLoginDTO: UserLoginDTO, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(userLoginDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {RedeemRewardRequest} redeemRewardRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public redeemReward(memberId: string, redeemRewardRequest: RedeemRewardRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).redeemReward(memberId, redeemRewardRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refresh(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).refresh(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdditionalInfoRegisterDTO} additionalInfoRegisterDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerAdditionalInfo(additionalInfoRegisterDTO: AdditionalInfoRegisterDTO, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerAdditionalInfo(additionalInfoRegisterDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserRegisterDTO} userRegisterDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signup(userRegisterDTO: UserRegisterDTO, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signup(userRegisterDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {UserUpdateDTO} userUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMember(memberId: string, userUpdateDTO: UserUpdateDTO, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateMember(memberId, userUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerifyTokenDTO} verifyTokenDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verifyToken(verifyTokenDTO: VerifyTokenDTO, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verifyToken(verifyTokenDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



